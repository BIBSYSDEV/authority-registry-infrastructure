AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for Building a pipeline
Parameters:
  ProjectId:
    Type: String
  ProjectBranch:
    Type: String
  NormalizedBranchName:
    Type: String
  GithubAuth:
    Type: String
    NoEcho: True
  GithubOwner:
    Type: String
  GithubRepo:
    Type: String
  PipelineBucketname:
    Type: String
  PipelineRolename:
    Type: String
  CreateStackRoleArn:
    Type: String
  CreateStackRoleName:
    Type: String
  PipelineName:
    Type: String
  PipelineTestServiceStackName:
    Type: String
  PipelineFinalServiceStackName:
    Type: String
  CodebuildProjectname:
    Type: String
  ExecuteTestsProjectname:
    Type: String
  CodebuildOutputArtifact:
    Type: String
  SourceStageOutputArtifact:
    Type: String
  InitFunctionName:
    Type: String
  DestroyFunctionName:
    Type: String
  TestPhaseName:
    Type: String
  FinalPhaseName:
    Type: String

Resources:

  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private
      BucketName: !Ref PipelineBucketname
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms

  S3BucketAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:*"
            Resource:
              - !Join ["", [!GetAtt S3Bucket.Arn, "/*"]]
              - !GetAtt S3Bucket.Arn
              - !Join ["", ["arn:aws:s3:::",!Ref PipelineBucketname, "/*"]]
              - !Join ["", ["arn:aws:s3:::",!Ref PipelineBucketname]]

      PolicyName: !Join ["-", [!Ref CreateStackRoleName, "s3Access"]]
      Roles:
        - !Ref CreateStackRoleName

  ExecuteTestsFailedEventRule: 
    Type: "AWS::Events::Rule"
    Properties: 
      Description: "ExecuteTests Failed"
      EventPattern: 
        source:
        - aws.codepipeline
        detail-type:
        - CodePipeline Action Execution State Change
        detail:
          pipeline:
          - !Ref PipelineName
          state:
          - FAILED
      State: "ENABLED"
      Targets: 
        -
          Arn: !GetAtt UpdateGithubStatus.Arn
          Id: updateGithubStatus

  ExecuteTestsSuccededEventRule: 
    Type: "AWS::Events::Rule"
    Properties: 
      Description: "ExecuteTests succeded"
      EventPattern: 
        source:
        - aws.codepipeline
        detail-type:
        - CodePipeline Action Execution State Change
        detail:
          pipeline:
          - !Ref PipelineName
          state:
          - SUCCEEDED
          action:
          - ExecuteTests
      State: "ENABLED"
      Targets: 
        -
          Arn: !GetAtt UpdateGithubStatus.Arn
          Id: updateGithubStatus

# https://stackoverflow.com/questions/49503569/lambda-with-cloud-formation-pass-cloud-formation-variable-to-python-code

  UpdateGithubStatus:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      FunctionName:  updateGithubStatusFunction
      Runtime: python3.6
      Role : !GetAtt PipelineRole.Arn
      Description: Updates github build status for given repo and branch.
      Code:
        ZipFile:  |
          from urllib.parse import urlencode
          from urllib.request import Request, urlopen
          import json 

          event_dict = json.loads(event)
          get_url = "https://api.github.com/repos/%s/%s/branches/%s" % (${!Ref GithubOwner}, ${!Ref GithubRepo}, ${!Ref ProjectBranch} )

          get_request = Request(get_url)

          sha = json.load(urlopen(get_request))['commit']['sha']

          post_url = "https://api.github.com/repos/%s/%s/statuses/%s" %  (${!Ref GithubOwner}, ${!Ref GithubRepo}, sha)

          pipeline_target = "https://eu-west-1.console.aws.amazon.com/codesuite/codepipeline/pipelines/%s/view" % ( event_dict ['detail']['pipeline'])

          state = 'failure'
          if event_dict['detail']['state'] == 'SUCCEEDED':
              state = 'success'

          post_data = {"state": state, "target_url": pipeline_target, "description": "OK", "context": "continuous-integration"}

          post_request = Request(post_url, bytes(urlencode(post_data).encode('ascii')))
          bearer_token = "Bearer %s" % (${!Ref GithubAuth})
          post_request.add_header('Authorization', bearer_token)
          post_response = urlopen(post_request).read().decode()      

  LambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - UpdateGithubStatus
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt
        - ExecuteTestsSuccededEventRule
        - Arn

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref PipelineRolename
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
                - codepipeline.amazonaws.com
                - codebuild.amazonaws.com
                - cloudformation.amazonaws.com
                - iam.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodePipelineFullAccess
        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess

      Policies:
        - PolicyName: lambdaInvocation
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                  - 'codepipeline:PutJobFailureResult'
                  - 'codepipeline:PutJobSuccessResult'
                Resource: '*'
        - PolicyName: s3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource:
                  - !Join ["", [!GetAtt S3Bucket.Arn, "/*"]]
                  - !GetAtt S3Bucket.Arn
                  - !Join ["", ["arn:aws:s3:::",!Ref PipelineBucketname, "/*"]]
                  - !Join ["", ["arn:aws:s3:::",!Ref PipelineBucketname]]
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: cloudFormationAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeChangeSet
                  - cloudformation:CreateChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:DeleteStack
                Resource:
                  - !Sub
                    - 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${StackName}/*'
                    - { StackName: !Ref PipelineTestServiceStackName}
                  - !Sub
                    - 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${StackName}/*'
                    - { StackName: !Ref PipelineFinalServiceStackName }
        - PolicyName: assumeRole
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - 'sts:AssumeRole'
                Effect: Allow
                Resource: "*"
        - PolicyName: ssmAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:GetParameters'
                  - 'ssm:GetParameter'
                Resource: '*'
        - PolicyName: pipelineHandling
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'codepipeline:DisableStageTransition'
                Resource: '*'


                
                
  CodeBuildProject:
    DependsOn:
      - S3Bucket
    Type: AWS::CodeBuild::Project
    Description: CodeBuild project for using in the CodePipeline
    Properties:
      Name: !Ref CodebuildProjectname
      Artifacts:
        Name: !Ref CodebuildOutputArtifact
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: "aws/codebuild/java:openjdk-8"
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: S3_BUCKET
            Type: PLAINTEXT
            Value: !Ref PipelineBucketname
      ServiceRole: !GetAtt PipelineRole.Arn
      Cache:
        Location:  !Join ['',[!Ref PipelineBucketname,'/buildcache']]
        Type: S3

  ExecuteTestsProject:
    DependsOn:
      - S3Bucket
    Type: AWS::CodeBuild::Project
    Description: CodeBuild project for executing tests
    Properties:
      Name: !Ref ExecuteTestsProjectname
      Artifacts:
        # when using CodePipeline both sourceType, and artifactType must be set to: CODEPIPELINE
        Type:  CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: "testspec.yml"
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: "aws/codebuild/nodejs:10.1.0"
        Type: LINUX_CONTAINER

        EnvironmentVariables:
          - Name: S3_BUCKET
            Type: PLAINTEXT
            Value: !Ref PipelineBucketname
          - Name: PROJECT_ID
            Type: PLAINTEXT
            Value: !Ref ProjectId
          - Name: BRANCH
            Type: PLAINTEXT
            Value: !Ref NormalizedBranchName
          - Name: STAGE
            Type: PLAINTEXT
            Value: test
      ServiceRole: !GetAtt PipelineRole.Arn
      Cache:
        Location:  !Join ['',[!Ref PipelineBucketname,'/buildcache']]
        Type: S3

  Pipeline:
    DependsOn:
      - CodeBuildProject
      - PipelineRole
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt PipelineRole.Arn
      Name: !Ref PipelineName
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineBucketname
      DisableInboundStageTransitions:
        - Reason: "Do not go to production"
          StageName: ProdStack

      Stages:
        - Name: Github_pull
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Provider: GitHub
                Owner: ThirdParty
                Version: 1
              Configuration:
                Owner: !Ref GithubOwner
                Repo:   !Ref GithubRepo
                OAuthToken: !Ref GithubAuth
                Branch: !Ref ProjectBranch
              OutputArtifacts:
                - Name: !Ref SourceStageOutputArtifact
        - Name: CodeBuild_step
          Actions:
            - Name: CodeBuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: !Ref SourceStageOutputArtifact
              OutputArtifacts:
                - Name: !Ref CodebuildOutputArtifact
              Configuration:
                ProjectName: !Ref CodebuildProjectname

        - Name: TestStack
          Actions:
            - Name: CreateTestStack
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                StackName: !Ref PipelineTestServiceStackName
                ChangeSetName: TestStageChangeSet
                Capabilities: CAPABILITY_NAMED_IAM
                RoleArn: !Ref CreateStackRoleArn
                TemplatePath: !Join ["", [!Ref CodebuildOutputArtifact,"::template-export.yml"]]
                ParameterOverrides:
                  !Sub
                  - '{"ProjectId":"${ProjectIdValue}", "Stage":"${TestPhaseName}","Branch":"${NormalizedBranchName}","CodeBucket":"${S3Bucket}","InitFunctionName": "${InitFunctionNameStage}", "DestroyFunctionName": "${DestroyFunctionNameStage}"}'
                  - { ProjectIdValue: !Ref ProjectId,  InitFunctionNameStage: !Join ['-', [!Ref InitFunctionName, !Ref TestPhaseName]], DestroyFunctionNameStage: !Join ['-', [!Ref DestroyFunctionName, !Ref TestPhaseName]] }
              InputArtifacts:
                - Name: !Ref CodebuildOutputArtifact
              RunOrder: 1
            - Name: ExecuteTestStack
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: TestStageChangeSet
                StackName: !Ref PipelineTestServiceStackName
              InputArtifacts: []
              OutputArtifacts: []
              RunOrder: 2
            - Name: InitializeStack
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: 1
                Provider: Lambda
              Configuration:
                FunctionName: !Join ['-', [!Ref InitFunctionName, !Ref TestPhaseName]]
              InputArtifacts: []
              OutputArtifacts: []
              RunOrder: 3
            - Name: ExecuteTests
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: !Ref SourceStageOutputArtifact
              Configuration:
                ProjectName: !Ref ExecuteTestsProjectname
              RunOrder: 4
            - Name: DestroyStack
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: 1
                Provider: Lambda
              Configuration:
                FunctionName: !Join ['-', [!Ref DestroyFunctionName, !Ref TestPhaseName]]
              InputArtifacts: []
              OutputArtifacts: []
              RunOrder: 5
            - Name: DeleteTestStack
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: DELETE_ONLY
                RoleArn: !Ref CreateStackRoleArn
                StackName: !Ref PipelineTestServiceStackName
              RunOrder: 6
        - Name: ProdStack
          Actions:
            - Name: CreateFinalStack
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                StackName: !Ref PipelineFinalServiceStackName
                ChangeSetName: ProdStageChangeSet
                Capabilities: CAPABILITY_NAMED_IAM
                RoleArn: !Ref CreateStackRoleArn
                TemplatePath: !Join ["", [!Ref CodebuildOutputArtifact,"::template-export.yml"]]
                ParameterOverrides:
                  !Sub
                  - '{"ProjectId":"${ProjectIdValue}", "Stage":"${FinalPhaseName}","Branch":"${NormalizedBranchName}","CodeBucket":"${S3Bucket}","InitFunctionName": "${InitFunctionNameStage}","DestroyFunctionName": "${DestroyFunctionNameStage}"}'
                  - { ProjectIdValue: !Ref ProjectId,  InitFunctionNameStage: !Join ['-', [!Ref InitFunctionName, !Ref FinalPhaseName]], DestroyFunctionNameStage: !Join ['-', [!Ref DestroyFunctionName, !Ref FinalPhaseName]] }
              InputArtifacts:
                - Name: !Ref CodebuildOutputArtifact
              RunOrder: 1
            - Name: ExecuteFinalStack
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: ProdStageChangeSet
                StackName: !Ref PipelineFinalServiceStackName
              InputArtifacts: []
              OutputArtifacts: []
              RunOrder: 2
            - Name: InitializeStack
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: 1
                Provider: Lambda
              Configuration:
                FunctionName: !Join ['-', [!Ref InitFunctionName, !Ref FinalPhaseName]]
              InputArtifacts: []
              OutputArtifacts: []
              RunOrder: 3
