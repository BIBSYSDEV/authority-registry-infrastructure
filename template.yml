AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Lambda function for Dynamic Pipelines

Parameters:
  ProjectId:
    Type: String
  Stage:
    Type: String
    Description: Deployment stage. E.g. test, prod, etc.
  Branch:
    Type: String
  CodeBucket:
    Type: String
  InitFunctionName:
    Type: String
  DestroyFunctionName:
    Type:  String

Resources:
  RestApi:
    DependsOn:
    - BuildBranch
    - GithubHook
    Type: AWS::Serverless::Api
    Properties:
      Name: !Join ['-',[!Ref ProjectId, !Ref Branch, !Ref Stage]]
      StageName: !Ref Stage

  GithubHook:
    Type: AWS::Serverless::Function
    Properties:
      Handler: no.bibsys.aws.lambda.api.handlers.GithubHandler::handleRequest
      Runtime: java8
      CodeUri: build/libs/pipeline-fat.jar
      MemorySize:  1500
      Timeout: 900
      Environment:
        Variables:
          READ_FROM_GITHUB_SECRET_NAME: 'github'
          READ_FROM_GITHUB_SECRET_KEY:  'read_from_github'
      Events:
        RestApiEvent:
          Type: Api
          Properties:
            Path: /github
            Method: post
            RestApiId: !Ref RestApi
      Policies:
        Version: '2012-10-17'
        Statement:
        - Action:
          - cloudformation:CreateStack
          - cloudformation:DescribeStacks
          - cloudformation:DeleteStack
          - codebuild:CreateProject
          - codebuild:DeleteProject
          - codepipeline:CreatePipeline
          - codepipeline:DeletePipeline
          - codepipeline:GetPipeline
          - codepipeline:GetPipelineState
          - iam:AttachRolePolicy
          - iam:CreateRole
          - iam:CreateRolePolicy
          - iam:DeleteRole
          - iam:DeleteRolePolicy
          - iam:DetachRolePolicy
          - iam:ListRolePolicies
          - iam:GetRole
          - iam:GetRolePolicy
          - iam:PassRole
          - lambda:InvokeFunction
          - iam:PutRolePolicy
          - logs:DeleteLogGroup
          - logs:DescribeLogGroups
          - s3:CreateBucket
          - s3:DeleteBucket
          - s3:DeleteBucketPolicy
          - s3:DeleteObject
          - s3:DeleteObjectVersion
          - s3:GetBucketPolicy
          - s3:GetEncryptionConfiguration
          - s3:ListBucket
          - s3:ListBucketVersions
          - s3:PutObject
          - s3:PutBucketVersioning
          - s3:PutBucketPolicy
          - s3:PutEncryptionConfiguration
          - s3:PutObject
          - codepipeline:DisableStageTransition
          Resource: "*"
          Effect: Allow
        - Action:
          - secretsmanager:GetSecretValue
          - ssm:GetParameter
          Resource: "*"
          Effect: Allow
        #The rest of the policies are for all lambda functions
        - Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource: "*"
          Effect: Allow
        - Effect: Allow
          Action:
          - s3:GetObject
          Resource: arn:aws:s3:::*/AWSLogs/*/Config/*
        - Effect: Allow
          Action:
          - config:Put*
          - config:Get*
          - config:List*
          - config:Describe*
          Resource: "*"
  BuildBranch:
    Type: AWS::Serverless::Function
    Properties:
      Handler: no.bibsys.aws.lambda.api.handlers.UpdateStackRequestHandler::handleRequest
      Runtime: java8
      CodeUri: build/libs/pipeline-fat.jar
      MemorySize:  1500
      Timeout: 900
      Environment:
        Variables:
          REST_USER_API_KEY_SECRET_NAME: 'infrastructure'
          REST_USER_API_KEY_SECRET_KEY:   'buildbranch'
          READ_FROM_GITHUB_SECRET_NAME: 'github'
          READ_FROM_GITHUB_SECRET_KEY:  'read_from_github'
      Events:
        RestApiEvent:
          Type: Api
          Properties:
            Path: /buildbranch
            Method: post
            RestApiId: !Ref RestApi
      Policies:
        Version: '2012-10-17'
        Statement:
        - Action:
          - cloudformation:CreateStack
          - cloudformation:DescribeStacks
          - cloudformation:DeleteStack
          - codebuild:CreateProject
          - codebuild:DeleteProject
          - codepipeline:CreatePipeline
          - codepipeline:DeletePipeline
          - codepipeline:GetPipeline
          - codepipeline:GetPipelineState
          - iam:AttachRolePolicy
          - iam:CreateRole
          - iam:CreateRolePolicy
          - iam:DeleteRole
          - iam:DeleteRolePolicy
          - iam:DetachRolePolicy
          - iam:ListRolePolicies
          - iam:GetRole
          - iam:GetRolePolicy
          - iam:PassRole
          - iam:PutRolePolicy
          - lambda:InvokeFunction
          - logs:DeleteLogGroup
          - logs:DescribeLogGroups
          - s3:CreateBucket
          - s3:DeleteBucket
          - s3:DeleteBucketPolicy
          - s3:DeleteObject
          - s3:DeleteObjectVersion
          - s3:GetBucketPolicy
          - s3:GetEncryptionConfiguration
          - s3:ListBucket
          - s3:ListBucketVersions
          - s3:PutObject
          - s3:PutBucketVersioning
          - s3:PutBucketPolicy
          - s3:PutEncryptionConfiguration
          - s3:PutObject
          - codepipeline:DisableStageTransition
          Resource: "*"
          Effect: Allow
        - Action:
          - secretsmanager:GetSecretValue
          - ssm:GetParameter
          Resource: "*"
          Effect: Allow
        #The rest of the policies are for all lambda functions
        - Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource: "*"
          Effect: Allow
        - Effect: Allow
          Action:
          - s3:GetObject
          Resource: arn:aws:s3:::*/AWSLogs/*/Config/*
        - Effect: Allow
          Action:
          - config:Put*
          - config:Get*
          - config:List*
          - config:Describe*
          Resource: "*"

  Init:
    Type: AWS::Serverless::Function
    DependsOn:
      - RestApi
    Properties:
      Handler: no.bibsys.aws.lambda.deploy.handlers.InitHandler::handleRequest
      FunctionName: !Ref InitFunctionName
      Runtime: java8
      Environment:
        Variables:
          SWAGGER_API_ID: '{{resolve:ssm:INFRASTRUCTURE_SWAGGER_API_ID:1}}'
          SWAGGER_API_VERSION: "1.0"
          SWAGGER_API_OWNER: '{{resolve:ssm:SWAGGER_API_OWNER:1}}'
          OWNER: "BIBSYSDEV"
          BRANCH: !Ref Branch
          REPOSITORY: 'authority-registry-infrastructure'
          STAGE: !Ref Stage
          ZONE_NAME: '{{resolve:ssm:HOSTED_ZONE_NAME:1}}'
          APPLICATION_URL: '{{resolve:ssm:INFRASTRUCTURE_URL:1}}'
          REGIONAL_CERTIFICATE_ARN: '{{resolve:ssm:infrastructure-entitydata-certificate-arn:1}}'
          STACK_NAME: !Ref AWS::StackName
          ACCESS_SWAGGERHUB_SECRET_NAME: swaggerapikey
          ACCESS_SWAGGERHUB_SECRET_KEY: swaggerapikey

      CodeUri: build/libs/pipeline-fat.jar
      Policies:
        Version: '2012-10-17'
        Statement:
        - Action:
          - secretsmanager:GetSecretValue
          - lambda:InvokeFunction
          - codepipeline:PutJobFailureResult
          - codepipeline:PutJobSuccessResult
          - apigateway:*
          - route53:ListHostedZones
          - route53:ChangeResourceRecordSets
          - apigateway:*
          - cloudformation:DescribeStackResources
          Effect: Allow
          Resource: "*"
        - Effect: Allow
          Action: iam:CreateServiceLinkedRole
          Resource: "arn:aws:iam::*:role/aws-service-role/*"
      MemorySize: 1500
      Timeout: 900
  Destroy:
    Type: AWS::Serverless::Function
    DependsOn:
    - RestApi
    Properties:
      Handler: no.bibsys.aws.lambda.deploy.handlers.DestroyHandler::handleRequest
      FunctionName: !Ref DestroyFunctionName
      Runtime: java8
      CodeUri: build/libs/pipeline-fat.jar
      Environment:
        Variables:
          SWAGGER_API_ID: '{{resolve:ssm:INFRASTRUCTURE_SWAGGER_API_ID:1}}'
          SWAGGER_API_VERSION: "1.0"
          SWAGGER_API_OWNER: '{{resolve:ssm:SWAGGER_API_OWNER:1}}'
          OWNER: "BIBSYSDEV"
          BRANCH: !Ref Branch
          REPOSITORY: 'authority-registry-infrastructure'
          STAGE: !Ref Stage
          ZONE_NAME: '{{resolve:ssm:HOSTED_ZONE_NAME:1}}'
          APPLICATION_URL: '{{resolve:ssm:INFRASTRUCTURE_URL:1}}'
          REGIONAL_CERTIFICATE_ARN: '{{resolve:ssm:infrastructure-entitydata-certificate-arn:1}}'
          STACK_NAME: !Ref AWS::StackName
          ACCESS_SWAGGERHUB_SECRET_NAME: swaggerapikey
          ACCESS_SWAGGERHUB_SECRET_KEY: swaggerapikey
      Policies:
        Version: '2012-10-17'
        Statement:
        - Action:
          - secretsmanager:GetSecretValue
          - lambda:InvokeFunction
          - codepipeline:PutJobFailureResult
          - codepipeline:PutJobSuccessResult
          - route53:ListHostedZones
          - route53:ChangeResourceRecordSets
          - apigateway:*
          - cloudformation:DescribeStackResources
          Effect: Allow
          Resource: "*"
      MemorySize: 1500
      Timeout: 900
