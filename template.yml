AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Lambda function for Dynamic Pipelines

Parameters:
  ProjectId:
    Type: String
    Description: AWS CodeStar projectID used to associate new resources to team members
  Stage:
    Type: String
    Description: Deployment stage. E.g. test, prod, etc.
  LambdaTrustRolename:
    Type: String
  CodeBucket:
    Type: String

Resources:
  LambdaTrustRole:
    Type: 'AWS::IAM::Role'
    Description: A trust role that will be assumed by the service
    Properties:
      RoleName: !Join ['-',[!Ref LambdaTrustRolename, !Ref Stage]]
      AssumeRolePolicyDocument:
        Statement:
        - Action: 'sts:AssumeRole'
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - cloudformation.amazonaws.com
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      - 'arn:aws:iam::aws:policy/service-role/AWSConfigRulesExecutionRole'
      Path: /
      Policies:
      - PolicyName: ReadSecrets
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Resource: '*'
            Action:
            - 'secretsmanager:GetSecretValue'
      - PolicyName: readParameters
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Resource: '*'
            Action:
            - "ssm:GetParameter"
      -
        PolicyName: cloudFormationEssentials
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          -
            Effect: Allow
            Resource: '*'
            Action:
            - 'cloudformation:CreateStack'
            - 'cloudformation:DescribeStacks'
            - 'cloudformation:DeleteStack'
            - 'codebuild:CreateProject'
            - 'codebuild:DeleteProject'
            - 'codepipeline:CreatePipeline'
            - 'codepipeline:DeletePipeline'
            - 'codepipeline:GetPipeline'
            - 'codepipeline:GetPipelineState'
            - 'iam:AttachRolePolicy'
            - 'iam:CreateRole'
            - 'iam:CreateRolePolicy'
            - 'iam:DeleteRole'
            - 'iam:DeleteRolePolicy'
            - 'iam:DetachRolePolicy'
            - 'iam:GetRole'
            - 'iam:PassRole'
            - 'iam:PutRolePolicy'
            - 'logs:DeleteLogGroup'
            - 'logs:DescribeLogGroups'
            - 's3:CreateBucket'
            - 's3:DeleteBucket'
            - 's3:DeleteObject'
            - 's3:DeleteObjectVersion'
            - 's3:GetEncryptionConfiguration'
            - 's3:ListBucket'
            - 's3:ListBucketVersions'
            - 's3:PutObject'
            - 's3:PutBucketVersioning'
            - 's3:PutEncryptionConfiguration'
            - 's3:PutObject'
  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: test
  EntityRegistry:
    Type: AWS::Serverless::Function
    Properties:
      Handler: no.bibsys.handler.SimpleHandler::handleRequest
      Runtime: java8
      CodeUri: build/libs/pipeline-fat.jar
      Role: !GetAtt LambdaTrustRole.Arn
      MemorySize:  1500
      Timeout: 900
      Environment:
        Variables:
          PROJECT_NAME: dynpipe
      Events:
        RestApiEvent:
          Type: Api
          Properties:
            Path: /lambda
            Method: post
            RestApiId: !Ref RestApi

  RestApiUrlParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Join ['-', [!Ref ProjectId,"restApiUrlParameter"]]
      Type: "String"
      Value: !Join ['', ['https://', !Ref 'RestApi', '.execute-api.', !Ref 'AWS::Region', '.amazonaws.com/',!Ref Stage]]
      Description: "SSM Parameter for storing RestApi URL"